# adapted from c5d template but here for c5a, no local disk
#
#
# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this
# software and associated documentation files (the "Software"), to deal in the Software
# without restriction, including without limitation the rights to use, copy, modify,
# merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

AWSTemplateFormatVersion: '2010-09-09'
Description: Logan Analysis Cloudformation template for instances d

Parameters:
  InstanceTypes:
    Description: EC2 instance types
    Type: List<String>
    Default: "c5a"
  Minvcpus:
    Type: Number
    Default: 0
    Description: Minimum number of vCPUs per Compute Environment
  Maxvcpus:
    Type: Number
    Default: 10000 
    Description: Maximum number of vCPUs per Compute Environment
  EBSBootSize:
    Type: Number
    Default: 30
    Description: Size in GiB of EBS root volume

############################
## AWS Batch Infrastructure
Resources:
  BatchInstanceRoleC5A:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: ''
          Effect: Allow
          Principal:
            Service: ec2.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
      - arn:aws:iam::aws:policy/AmazonS3FullAccess
      - arn:aws:iam::aws:policy/AmazonElasticMapReduceFullAccess # for sdb
      - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore # for connecting to instance
      - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy # for https://github.com/aws-samples/aws-batch-blueprints/blob/main/templates/batch-jq-ce-lt-detailed-monitoring.yaml
  BatchInstancePolicyC5A: # from https://github.com/aws-samples/aws-batch-blueprints/blob/main/templates/batch-jq-ce-lt-ebs-resize.yaml
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub 'BatchInstancePolicy-${AWS::StackName}'
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - ec2:ModifyInstanceAttribute
              - logs:CreateLogGroup # for awslogs
              - dynamodb:UpdateItem
            Resource:
              - '*'
      Roles:
        - !Ref BatchInstanceRoleC5A
  BatchInstanceProfileC5A:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
      - Ref: BatchInstanceRoleC5A
  SpotIamFleetRole: # taken from https://github.com/aodn/aws-wps/blob/master/wps-cloudformation-template.yaml
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: spot.amazonaws.com
            Action: sts:AssumeRole
          - Effect: Allow
            Principal:
              Service: spotfleet.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2SpotFleetTaggingRole

  BatchLaunchTemplateC5A:
    Type: 'AWS::EC2::LaunchTemplate'
    Properties:
      LaunchTemplateData:
          BlockDeviceMappings:
          - DeviceName: '/dev/xvda'
            Ebs:
              DeleteOnTermination: true
              Encrypted: false
              Iops: 3000
              VolumeSize: !Ref EBSBootSize
              VolumeType: 'gp3'
          UserData:
            Fn::Base64:
              !Sub |
                MIME-Version: 1.0
                Content-Type: multipart/mixed; boundary="==MYBOUNDARY=="

                --==MYBOUNDARY==
                Content-Type: text/x-shellscript; charset="us-ascii"

                #!/bin/bash

                exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1

                echo "nothing in userdata"
            
                --==MYBOUNDARY==--

  CENODISK:
    Type: AWS::Batch::ComputeEnvironment
    Properties:
      Type: MANAGED
      ComputeResources:
        AllocationStrategy: SPOT_PRICE_CAPACITY_OPTIMIZED
        LaunchTemplate:
            LaunchTemplateId: !Ref BatchLaunchTemplateC5A
            Version: !GetAtt BatchLaunchTemplateC5A.LatestVersionNumber
        MinvCpus: !Ref Minvcpus
        MaxvCpus: !Ref Maxvcpus
        Type: SPOT 
        InstanceRole:
          Ref: BatchInstanceProfileC5A
        InstanceTypes: !Ref InstanceTypes
        ImageId: ami-09f62d2604cc5b8fe # my custom Logan AMI (has awscliv2, mdadm) 
        Ec2KeyPair: "serratus"
        SpotIamFleetRole: !Ref SpotIamFleetRole
        Subnets: !Split [",", !ImportValue 'Logan-LargeScaleVPC-PrivateSubnets']
        Tags:
          Name: Logan-Analysis-SPOTC5A-1
        SecurityGroupIds:
        - !ImportValue 'Logan-LargeScaleVPC-SecurityGroup'
      ReplaceComputeEnvironment: false
      State: ENABLED

  CENODISK2:
    Type: AWS::Batch::ComputeEnvironment
    Properties:
      Type: MANAGED
      ComputeResources:
        AllocationStrategy: SPOT_PRICE_CAPACITY_OPTIMIZED
        LaunchTemplate:
            LaunchTemplateId: !Ref BatchLaunchTemplateC5A
            Version: !GetAtt BatchLaunchTemplateC5A.LatestVersionNumber
        MinvCpus: !Ref Minvcpus
        MaxvCpus: !Ref Maxvcpus
        Type: SPOT 
        InstanceRole:
          Ref: BatchInstanceProfileC5A
        InstanceTypes: !Ref InstanceTypes
        ImageId: ami-09f62d2604cc5b8fe # my custom Logan AMI (has awscliv2, mdadm) 
        Ec2KeyPair: "serratus"
        SpotIamFleetRole: !Ref SpotIamFleetRole
        Subnets: !Split [",", !ImportValue 'Logan-LargeScaleVPC-PrivateSubnets']
        Tags:
          Name: Logan-Analysis-SPOTC5A-2
        SecurityGroupIds:
        - !ImportValue 'Logan-LargeScaleVPC-SecurityGroup'
      ReplaceComputeEnvironment: false
      State: ENABLED

  CENODISK3:
    Type: AWS::Batch::ComputeEnvironment
    Properties:
      Type: MANAGED
      ComputeResources:
        AllocationStrategy: SPOT_PRICE_CAPACITY_OPTIMIZED
        LaunchTemplate:
            LaunchTemplateId: !Ref BatchLaunchTemplateC5A
            Version: !GetAtt BatchLaunchTemplateC5A.LatestVersionNumber
        MinvCpus: !Ref Minvcpus
        MaxvCpus: !Ref Maxvcpus
        Type: SPOT 
        InstanceRole:
          Ref: BatchInstanceProfileC5A
        InstanceTypes: !Ref InstanceTypes
        ImageId: ami-09f62d2604cc5b8fe # my custom Logan AMI (has awscliv2, mdadm) 
        Ec2KeyPair: "serratus"
        SpotIamFleetRole: !Ref SpotIamFleetRole
        Subnets: !Split [",", !ImportValue 'Logan-LargeScaleVPC-PrivateSubnets']
        Tags:
          Name: Logan-Analysis-SPOTC5A-3
        SecurityGroupIds:
        - !ImportValue 'Logan-LargeScaleVPC-SecurityGroup'
      ReplaceComputeEnvironment: false
      State: ENABLED

  BatchJobQueueC5A:
    Type: AWS::Batch::JobQueue
    Properties:
      JobQueueName: 'LoganAnalysisJobQueueC5A'
      ComputeEnvironmentOrder:
        - ComputeEnvironment: !Ref CENODISK
          Order: 1
        - ComputeEnvironment: !Ref CENODISK2
          Order: 2
        - ComputeEnvironment: !Ref CENODISK3
          Order: 3
      Priority: 1
      State: "ENABLED"

  LoganAnalysisOneCoreNoDiskJobDefinition:
    Type: AWS::Batch::JobDefinition
    Properties:
      Type: container
      JobDefinitionName: 'logan-analysis-nodisk-1c-job' 
      ContainerProperties:
        Image:
          Fn::Join:
          - ''
          - - Ref: AWS::AccountId
            - .dkr.ecr.
            - Ref: AWS::Region
            - ".amazonaws.com/logan-analysis-job-x86_64:latest"
        ResourceRequirements:
          - Type: MEMORY
            Value: "1500"
          - Type: VCPU
            Value: "1" 
      RetryStrategy:
        Attempts: 2
        EvaluateOnExit:
          - OnStatusReason: "Host EC2*"
            Action: "RETRY"
          - OnReason: "*"
            Action: "EXIT"

